program reentrantlock-multiple {
    STATES {
        q : init, qq, q0, q1, q2, q3, q4, q5, q6, end, env_error_st, con_error_st
    }

    ENVIRONMENT EVENTS {
        env_lock, env_unlock, stop, env_who_locks
    }

    CONTROLLER EVENTS {
        change_who_locks, dec, inc
    }

    PROGRAM EVENTS {
        env_error, con_error, glockis0, allow_swap
    }

    VALUATION {
        got_lock : integer := 0;
        L : integer := 0;
        who_locks : bool := false;
        owner_is_env : bool := false;
    }

    ENVIRONMENT TRANSITIONS {
        q -> q [],
        qq -> q0 [!env_who_locks $ who_locks := false # allow_swap],
        qq -> q0 [env_who_locks $ who_locks := true # allow_swap],
        q0 -> q1 [env_lock],
        q0 -> q4 [!env_lock && env_unlock],
        q0 -> q5 [!env_lock && !env_unlock],
        q1 -> q2 [(L == 0 || (who_locks <-> owner_is_env))],
        q1 -> con_error_st [!(L == 0 || (who_locks <-> owner_is_env))],
        q2 -> q3 [who_locks $ L := L + 1; owner_is_env := true;],
        q2 -> q3 [!who_locks $ L := L + 1; owner_is_env := false;],
        q3 -> q4 [env_unlock && got_lock != 0 && (who_locks <-> owner_is_env)],
        q3 -> con_error_st [env_unlock && got_lock != 0 && !(who_locks <-> owner_is_env)],
        q3 -> q5 [got_lock == 0 # glockis0],
        q3 -> q5 [got_lock != 0 && !env_unlock],
        q4 -> q5 [L > 0 $ L := L - 1],
        q4 -> env_error_st [L <= 0],
        q5 -> end [got_lock = 0 && stop # glockis0],
        q5 -> end [got_lock != 0 && stop],
        q5 -> q [got_lock = 0 && !stop # glockis0],
        q5 -> q [got_lock != 0 && !stop],
        con_error_st -> con_error_st [ # con_error],
        env_error_st -> env_error_st [ # env_error]
    }

    CONTROLLER TRANSITIONS {
        q -> qq [!(dec | inc) && change_who_locks],
        q -> q0 [!(dec | inc) && !change_who_locks],

        q -> con_error_st [dec | inc],
        qq -> con_error_st [dec | inc],
        q0 -> con_error_st [dec | inc],
        q1 -> con_error_st [dec | inc],
        q2 -> con_error_st [dec | inc],
        q4 -> con_error_st [dec | inc],
        q6 -> con_error_st [dec | inc],
        q3 -> q3 [dec & !inc $ got_lock := got_lock - 1],
        q3 -> q3 [!dec & inc $ got_lock := got_lock + 1],
        q3 -> q3 [!((dec & !inc) || (!dec & inc))],
        q5 -> q5 [dec & !inc $ got_lock := got_lock - 1],
        q5 -> q5 [!dec & inc $ got_lock := got_lock + 1],
        q5 -> q5 [!((dec & !inc) || (!dec & inc))]
    }
}