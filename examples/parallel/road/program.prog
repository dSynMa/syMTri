program eventually__allow_grant {
    STATES {
        q0 : init, q1
    }

    ENVIRONMENT EVENTS {
        entry_l;
        entry_r;
        exit_l;
        exit_r;
        l2r;
    }

    CONTROLLER EVENTS {
        stop_l;
        stop_r;
    }

    PROGRAM EVENTS {
        danger; error; empty_l; empty_r;
    }

    VALUATION {
        cl : natural := 0;
        cr : natural := 0;
    }

    ENVIRONMENT TRANSITIONS {
        q0 -> q0 [ cr_next != 0 & !(cl_next == 0) $
                     cl := cl + 1 if entry_l && !exit_r;
                     cl := cl - 1 if !entry_l && exit_r;
                     cr := cr + 1 if entry_r && !exit_l;
                     cr := cr - 1 if !entry_r && exit_l;],
        q0 -> q0 [ cr_next == 0 & !(cl_next == 0) $
                     cl := cl + 1 if entry_l && !exit_r;
                     cl := cl - 1 if !entry_l && exit_r;
                     cr := cr + 1 if entry_r && !exit_l;
                     cr := cr - 1 if !entry_r && exit_l; # empty_r],
        q0 -> q0 [ !(cr_next == 0) & (cl_next == 0) $
                     cl := cl + 1 if entry_l && !exit_r;
                     cl := cl - 1 if !entry_l && exit_r;
                     cr := cr + 1 if entry_r && !exit_l;
                     cr := cr - 1 if !entry_r && exit_l; # empty_l],
        q0 -> q0 [ (cr_next == 0) & (cl_next == 0) $
                     cl := cl + 1 if entry_l && !exit_r;
                     cl := cl - 1 if !entry_l && exit_r;
                     cr := cr + 1 if entry_r && !exit_l;
                     cr := cr - 1 if !entry_r && exit_l; # empty_r, empty_l],
        q1 -> q1 [ $ # danger]
    }

    CONTROLLER TRANSITIONS {
        q0 -> q1 [(cl > 0 && cr > 0)]
    }
}